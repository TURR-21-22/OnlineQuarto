<div class="webgl-container"></div>
<script src="//cdn.rawgit.com/mrdoob/three.js/master/build/three.js"></script>
<script src='/js/threex.windowresize.js'></script>
<script>
  const canvas = document.getElementsByClassName('webgl-container')[0];
  const mapDimensions = getmapDimensions(canvas);
  
  let camera, scene, renderer, mesh,
      geometry, material, clock,
      myWidth,myHeight,tanFOV;
  
  const worldWidth = 128, worldDepth = 128;
  
  const init = () => {
    clock = new THREE.Clock();
    camera = new THREE.PerspectiveCamera(60, mapDimensions.width/mapDimensions.height, 1, 20000);
    camera.position.y = 200;
    tanFOV = Math.tan( ( ( Math.PI / 180 ) * camera.fov / 2 ) );
    scene = new THREE.Scene();
  
    scene.background = new THREE.Color( 0x2b2828 ); //0xaaccff
    scene.fog = new THREE.FogExp2( 0x2b2828, 0.0007  );
    scene.add(new THREE.HemisphereLight(0xffffcc, 0x19bbdc, 1));
    myRenderer();
    canvas.appendChild( renderer.domElement );
    ocean();
  }
  
  const animate = () => {
    requestAnimationFrame(animate);
    render();
  }
  
  function render() {
      const delta = clock.getDelta();
      const time = clock.getElapsedTime() * 4;
      const position = geometry.attributes.position;
      for ( let i = 0; i < position.count; i ++ ) {
      	const y = 35 * Math.sin( i / 5 + ( time + i ) / 7 );
      	position.setY( i, y );
      }
      position.needsUpdate = true;
      renderer.render( scene, camera );
  }
  
  function myRenderer() {
      myWidth = mapDimensions.width;
      myHeight = mapDimensions.height;
      renderer = new THREE.WebGLRenderer( { alpha: false } ); //,antialias: true
      const renderCanvas = renderer.domElement;
      renderer.setSize(myWidth, myHeight, false);
      renderer.setPixelRatio( myHeight / myHeight ); //window.devicePixelRatio
      camera.updateProjectionMatrix();
      renderer.outputEncoding = THREE.sRGBEncoding;
      renderer.shadowMap.enabled = true;
      let dimension = function(){ return { width: canvas.offsetWidth, height: canvas.offsetHeight } }
  	  THREEx.WindowResize(renderer, camera, dimension, mesh, tanFOV);
  };
  
  function getmapDimensions(container) {
    return container.getBoundingClientRect();
  }
  
  function ocean() {
        geometry = new THREE.PlaneGeometry( 20000, 20000, worldWidth - 1, worldDepth - 1 );
      	geometry.rotateX( - Math.PI / 2 );
      	const position = geometry.attributes.position;
      	position.usage = THREE.DynamicDrawUsage;
      	for ( let i = 0; i < position.count; i ++ ) {
      		const y = 35 * Math.sin( i / 2 );
      		position.setY( i, y );
      	}
      	const texture = new THREE.TextureLoader().load( '/media/textures/water.jpg' );
      	texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
      	texture.repeat.set( 5, 5 );
      	material = new THREE.MeshBasicMaterial( { color: 0x0044ff, map: texture } );
      	mesh = new THREE.Mesh( geometry, material );
      	scene.add( mesh );
  }
  
  init();
  animate();
</script>